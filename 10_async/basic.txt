sync in JS
-----------

synchronous
--> code runs in a particular sequence of instructions given in the program. each instructions wait for the previous instructions to complete its execution


Asynchronous
--> Due to synchronous programming , sometimes imp instructions get blocked due to some previous instructions , which causes a delay in the UI.
--> Asynchronous code execution allows to execute next instructions immediately and doesnt block the flow.


Callbacks
--------------------

A callback is a function passed as an argument to another function



Callback Hell
--------------------
Callback Hell :Nested Callbacks stacked below one another forming a pyramid structure(pyramid of Doom)

This style of programming becomes difficult to understand and manage.


promises
-----------------

---->to overcome callback Hell
---->Promise is for eventual completion of task . It is an object in JS. It is a solution to callback hell.


let promise = new Promise((resolve , reject) => {
    ......
})
funtion with 2 handlers


resolve and reject are callbacks provided in JS

promise has 3 state -- a js promise object can be
---pending  : the result is undefined
---fullfilled [resolved] : the result is a value (fullfilled)                          resolve (result)
---rejected  : the result is an error object

------------------------------------
to USE these promises

.then()  and .catch()

promise.then((res) => {...})  ---if fullfills

promise.catch((err) =>{...})    ---if rejects

----------------------------------------------

Promise Chain
--------------

to deal with callback hell 


---------------------------------------------
Async-Await
----------------

Async function always returns a promise.

Async function myFunc() {...}

await pauses the execution of its surrounding async function until the promise is settled.
























